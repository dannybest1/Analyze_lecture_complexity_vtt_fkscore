WEBVTT

1
00:00:05.180 --> 00:00:07.710
The DataFrame data structure is

2
00:00:07.710 --> 00:00:09.510
the heart of the Panda's library.

3
00:00:09.510 --> 00:00:11.730
It's a primary object that
you'll be working with

4
00:00:11.730 --> 00:00:14.670
in data analysis
and cleaning tasks.

5
00:00:14.670 --> 00:00:17.310
The DataFrame is conceptually

6
00:00:17.310 --> 00:00:19.230
a two-dimensional series object,

7
00:00:19.230 --> 00:00:22.125
where there's an index and
multiple columns of content,

8
00:00:22.125 --> 00:00:24.030
with each column having a label.

9
00:00:24.030 --> 00:00:26.360
In fact, the distinction
between a column and

10
00:00:26.360 --> 00:00:28.985
a row is only a
conceptual distinction,

11
00:00:28.985 --> 00:00:31.145
and you can think of
the DataFrame itself as

12
00:00:31.145 --> 00:00:33.905
simply a two-axis labeled array.

13
00:00:33.905 --> 00:00:36.755
Let's start by importing
our panda's library.

14
00:00:36.755 --> 00:00:39.560
So import pandas as pd.

15
00:00:39.560 --> 00:00:42.275
I'm going to jump
in with an example.

16
00:00:42.275 --> 00:00:44.120
Let's create three school records

17
00:00:44.120 --> 00:00:46.235
for students and
their class grades.

18
00:00:46.235 --> 00:00:49.370
I'll create each as a series
which has a student name,

19
00:00:49.370 --> 00:00:51.095
the class name, and the score.

20
00:00:51.095 --> 00:00:55.700
So record1 is pd.Series, and
we'll use a dictionary here

21
00:00:55.700 --> 00:00:58.085
and we'll say the student's
name is Alice,

22
00:00:58.085 --> 00:01:00.240
the class is physics,

23
00:01:00.240 --> 00:01:03.165
and the score she got was 85.

24
00:01:03.165 --> 00:01:06.480
Record2 the name is Jack,

25
00:01:06.480 --> 00:01:08.425
the class is chemistry,

26
00:01:08.425 --> 00:01:10.205
and the score is 82.

27
00:01:10.205 --> 00:01:14.390
And for record3 we'll set the name
of the student to Helen,

28
00:01:14.390 --> 00:01:16.135
the class is Biology,

29
00:01:16.135 --> 00:01:19.095
and the score is 90.

30
00:01:19.095 --> 00:01:23.135
So like a series the
DataFrame object is indexed.

31
00:01:23.135 --> 00:01:24.460
I'll use a group of series,

32
00:01:24.460 --> 00:01:27.050
where each series
represents a row of data.

33
00:01:27.050 --> 00:01:28.730
Just like the series function,

34
00:01:28.730 --> 00:01:31.520
we can pass in our individual
items in an array and

35
00:01:31.520 --> 00:01:34.745
we can pass in our index
values as second arguments.

36
00:01:34.745 --> 00:01:36.890
So df is a common name for

37
00:01:36.890 --> 00:01:39.650
a DataFrame equals pd.DataFrame,

38
00:01:39.650 --> 00:01:41.180
and we'll pass in record1,

39
00:01:41.180 --> 00:01:43.535
record2, record3 as our arrays,

40
00:01:43.535 --> 00:01:45.545
and we'll just say our index is

41
00:01:45.545 --> 00:01:48.660
school1, school2 and school1.

42
00:01:49.400 --> 00:01:52.780
And, just like the series, we
can use the head function

43
00:01:52.780 --> 00:01:55.480
to see the first several
rows of the DataFrame,

44
00:01:55.480 --> 00:01:57.910
including indices from both axis,

45
00:01:57.910 --> 00:01:59.590
and we can use this to verify

46
00:01:59.590 --> 00:02:02.990
the columns and
the rows, so df.head.

47
00:02:02.990 --> 00:02:05.740
You'll notice here the Jupyter
creates a nice bit of

48
00:02:05.740 --> 00:02:08.470
HTML to render the results
of the DataFrame.

49
00:02:08.470 --> 00:02:09.700
So we have the index,

50
00:02:09.700 --> 00:02:12.160
which is the leftmost column
and is the school name,

51
00:02:12.160 --> 00:02:13.630
and then we have
the rows of data,

52
00:02:13.630 --> 00:02:15.640
where each row has a
column header which was

53
00:02:15.640 --> 00:02:18.980
given in our initial
record directories.

54
00:02:19.860 --> 00:02:22.240
An alternative method is that

55
00:02:22.240 --> 00:02:23.830
you could use a list
of dictionaries,

56
00:02:23.830 --> 00:02:26.965
where each dictionary
represents a row of data.

57
00:02:26.965 --> 00:02:29.290
So students equals
and then we'll make

58
00:02:29.290 --> 00:02:31.360
a dictionary in this list,

59
00:02:31.360 --> 00:02:32.950
and we'll say Alice,

60
00:02:32.950 --> 00:02:35.815
Physics, and the Score.

61
00:02:35.815 --> 00:02:39.400
Then the next dictionary
is Jack, Chemistry,

62
00:02:39.400 --> 00:02:41.695
and the Score, and then Helen,

63
00:02:41.695 --> 00:02:44.480
Biology and her Score of 90.

64
00:02:44.480 --> 00:02:46.070
Then we pass this list of

65
00:02:46.070 --> 00:02:48.500
dictionaries into
the DataFrame function.

66
00:02:48.500 --> 00:02:50.900
So df equals pd.DataFrame and

67
00:02:50.900 --> 00:02:52.460
would just pass
the list of students,

68
00:02:52.460 --> 00:02:54.335
and we say we want
to index them as

69
00:02:54.335 --> 00:02:57.395
school1, school2, and school1.

70
00:02:57.395 --> 00:03:00.625
Let's print this
again with df.head.

71
00:03:00.625 --> 00:03:03.000
So similar to the series,

72
00:03:03.000 --> 00:03:06.855
we can extract data using
the .iloc and .loc attributes.

73
00:03:06.855 --> 00:03:09.340
Because the DataFrame
is two-dimensional,

74
00:03:09.340 --> 00:03:12.530
passing a single value to
loc indexing operator will

75
00:03:12.530 --> 00:03:16.175
return the series if there's
only one row to return.

76
00:03:16.175 --> 00:03:18.200
For instance, if we
wanted to select

77
00:03:18.200 --> 00:03:20.135
data associated with school2,

78
00:03:20.135 --> 00:03:23.720
we would just query the .loc
attribute with one parameter.

79
00:03:23.720 --> 00:03:26.330
So df.loc, it's our index

80
00:03:26.330 --> 00:03:29.120
so the value we're
looking for is school2.

81
00:03:29.120 --> 00:03:30.860
You'll note that the name of

82
00:03:30.860 --> 00:03:32.990
the series is returned
as the index value,

83
00:03:32.990 --> 00:03:36.990
while the column name is
included in the output.

84
00:03:37.120 --> 00:03:39.620
We can check the data type of

85
00:03:39.620 --> 00:03:42.440
the return using
the python type function.

86
00:03:42.440 --> 00:03:47.150
So just type df.loc [school2],

87
00:03:47.150 --> 00:03:51.105
and we can see here it's
pandas.core.series.Series.

88
00:03:51.105 --> 00:03:52.930
It's important to remember that

89
00:03:52.930 --> 00:03:54.715
the indices and
column names along

90
00:03:54.715 --> 00:03:59.065
either axis horizontal or
vertical, could be non-unique.

91
00:03:59.065 --> 00:04:00.670
In this example, we see

92
00:04:00.670 --> 00:04:03.625
two records for school1
as different rows.

93
00:04:03.625 --> 00:04:05.440
If we use a single value with

94
00:04:05.440 --> 00:04:07.149
the DataFrame lock attribute,

95
00:04:07.149 --> 00:04:09.880
multiple rows of the
DataFrame will be return,

96
00:04:09.880 --> 00:04:11.095
not as a new series,

97
00:04:11.095 --> 00:04:12.610
but as a new DataFrame.

98
00:04:12.610 --> 00:04:15.730
So let's query for
school1 records.

99
00:04:15.730 --> 00:04:20.590
So df.loc [school1].

100
00:04:20.590 --> 00:04:21.940
Here we can see the type of

101
00:04:21.940 --> 00:04:23.575
this is actually different too.

102
00:04:23.575 --> 00:04:27.030
So type df.loc [school1],

103
00:04:27.030 --> 00:04:31.425
and that's actually a
pandas.core.frame.DataFrame.

104
00:04:31.425 --> 00:04:34.300
One of the powers of
the panda's DataFrame,

105
00:04:34.300 --> 00:04:35.840
is that you can quickly select

106
00:04:35.840 --> 00:04:37.880
data based on multiple axis.

107
00:04:37.880 --> 00:04:40.040
For instance, if
you wanted to just

108
00:04:40.040 --> 00:04:42.440
list the student names
for school1,

109
00:04:42.440 --> 00:04:45.290
you can supply
two parameters to.loc,

110
00:04:45.290 --> 00:04:46.700
one being the row index

111
00:04:46.700 --> 00:04:48.550
and the other being
the column name.

112
00:04:48.550 --> 00:04:50.840
So for instance, if we're only

113
00:04:50.840 --> 00:04:53.390
interested in
school1 student names,

114
00:04:53.390 --> 00:04:57.770
we can say df.loc [school1]
as the first parameter,

115
00:04:57.770 --> 00:05:00.600
and name as the second parameter.

116
00:05:01.070 --> 00:05:03.720
Remember, just like the series,

117
00:05:03.720 --> 00:05:06.665
the Panda's developers have
implemented this using

118
00:05:06.665 --> 00:05:11.140
indexing operators and
not parameters to a function.

119
00:05:11.140 --> 00:05:13.430
So what would we do
if we want it to

120
00:05:13.430 --> 00:05:15.145
select a single column row?

121
00:05:15.145 --> 00:05:17.175
Well, there's a few mechanisms.

122
00:05:17.175 --> 00:05:19.380
First, we could
transpose the matrix.

123
00:05:19.380 --> 00:05:21.290
This pivots all of the rows into

124
00:05:21.290 --> 00:05:23.210
columns and all of the
columns into rows,

125
00:05:23.210 --> 00:05:27.900
and it's done with
the T attribute. So df.T.

126
00:05:28.670 --> 00:05:31.430
Then we can use the.lock on

127
00:05:31.430 --> 00:05:33.890
the transpose to get
the student names only.

128
00:05:33.890 --> 00:05:39.470
So df.T.loc[name].

129
00:05:39.470 --> 00:05:42.980
However, since iloc and loc
are used for row selection,

130
00:05:42.980 --> 00:05:45.500
Panda reserves
the indexing operator

131
00:05:45.500 --> 00:05:48.410
directly on the DataFrame
for column selection.

132
00:05:48.410 --> 00:05:50.030
In a Panda's DataFrame,

133
00:05:50.030 --> 00:05:52.090
columns always have a name.

134
00:05:52.090 --> 00:05:54.830
So this selection is
always label based,

135
00:05:54.830 --> 00:05:56.960
and it's not as confusing
as it was when using

136
00:05:56.960 --> 00:06:00.155
the square bracket operator
on the series objects.

137
00:06:00.155 --> 00:06:02.990
For those familiar with
relational databases,

138
00:06:02.990 --> 00:06:06.470
this operator is analogous
to column projection.

139
00:06:06.470 --> 00:06:10.730
So df[name], and that

140
00:06:10.730 --> 00:06:13.100
projects the name column

141
00:06:13.100 --> 00:06:15.745
and you'll note the index
is still in there.

142
00:06:15.745 --> 00:06:18.755
In practice, this works
really well since

143
00:06:18.755 --> 00:06:21.620
you're often trying to
add or drop new columns.

144
00:06:21.620 --> 00:06:24.380
However, this means that you
can get a key error when you

145
00:06:24.380 --> 00:06:27.275
try and use the .lock
with a column name.

146
00:06:27.275 --> 00:06:31.220
So df.loc[Name] and
that produces this

147
00:06:31.220 --> 00:06:36.300
big nasty looking key error here.

148
00:06:36.300 --> 00:06:37.850
Note too that the result of

149
00:06:37.850 --> 00:06:41.075
a single column projection
is a Series object.

150
00:06:41.075 --> 00:06:44.970
So we look at type of df[name],

151
00:06:44.970 --> 00:06:48.670
we see it's a
pandas.core.series.Series.

152
00:06:48.670 --> 00:06:50.630
Since the result of using

153
00:06:50.630 --> 00:06:53.360
the indexing operator is
either a DataFrame or series,

154
00:06:53.360 --> 00:06:55.715
you can chain
operations together.

155
00:06:55.715 --> 00:06:58.490
For instance, we can select
all of the rows which

156
00:06:58.490 --> 00:07:01.390
related to school1 using.loc,

157
00:07:01.390 --> 00:07:04.655
then project the name
column for just those rows.

158
00:07:04.655 --> 00:07:07.730
So df.loc [school1].

159
00:07:07.730 --> 00:07:09.080
So that's our row.

160
00:07:09.080 --> 00:07:10.970
We only want those that involve

161
00:07:10.970 --> 00:07:13.160
school1 based on the index,

162
00:07:13.160 --> 00:07:16.625
but then we'll project using
[Name] at the very end,

163
00:07:16.625 --> 00:07:18.690
just the Name column.

164
00:07:19.100 --> 00:07:22.340
If you get confused, you
can use type to check

165
00:07:22.340 --> 00:07:24.830
the responses from
resulting operations.

166
00:07:24.830 --> 00:07:29.300
So if you print the type
of df.loc [school 1],

167
00:07:29.300 --> 00:07:30.695
this should be a data frame.

168
00:07:30.695 --> 00:07:34.400
If you print the type of
df.loc [school1] [Name],

169
00:07:34.400 --> 00:07:36.420
this should be a series.

170
00:07:37.490 --> 00:07:39.980
Chaining, by indexing on

171
00:07:39.980 --> 00:07:41.510
the return type of another index,

172
00:07:41.510 --> 00:07:43.490
can come with
some cost and is best

173
00:07:43.490 --> 00:07:45.965
avoided if you can
use another approach.

174
00:07:45.965 --> 00:07:49.625
In particular, chaining tends
to cause Pandas to return

175
00:07:49.625 --> 00:07:51.170
a copy of the DataFrame

176
00:07:51.170 --> 00:07:53.245
instead of a view
on the DataFrame.

177
00:07:53.245 --> 00:07:55.800
For selecting data,
this is not a big deal,

178
00:07:55.800 --> 00:07:58.485
though might be slower
than necessary.

179
00:07:58.485 --> 00:08:01.470
If you are chaining data though,

180
00:08:01.470 --> 00:08:02.799
it's an important distinction,

181
00:08:02.799 --> 00:08:05.275
because this can be
a source of error.

182
00:08:05.275 --> 00:08:07.230
Here's another approach.

183
00:08:07.230 --> 00:08:09.830
As we saw.loc does row selection,

184
00:08:09.830 --> 00:08:11.755
and it can take two parameters,

185
00:08:11.755 --> 00:08:14.405
the row index, and
the list of column names.

186
00:08:14.405 --> 00:08:17.885
The .loc attribute also
supports slicing.

187
00:08:17.885 --> 00:08:19.910
If we wanted to select all rows,

188
00:08:19.910 --> 00:08:21.665
we can use a colon to

189
00:08:21.665 --> 00:08:23.900
indicate a full slice
from beginning to end.

190
00:08:23.900 --> 00:08:27.895
This is just like slicing
characters in a list in Python.

191
00:08:27.895 --> 00:08:30.125
Then we can add the column name

192
00:08:30.125 --> 00:08:32.540
as the second parameter
as a string.

193
00:08:32.540 --> 00:08:34.780
If we wanted to include
multiple columns,

194
00:08:34.780 --> 00:08:36.270
we could do so in a list,

195
00:08:36.270 --> 00:08:37.565
and pandas will bring back

196
00:08:37.565 --> 00:08:39.650
only the columns that
we've asked for.

197
00:08:39.650 --> 00:08:43.055
Here's an example, where we
ask for all of the names and

198
00:08:43.055 --> 00:08:46.805
scores for all schools
using the.loc operator.

199
00:08:46.805 --> 00:08:49.895
So df.loc and I want all schools.

200
00:08:49.895 --> 00:08:53.390
So I'm just going to put
a colon as the first parameter,

201
00:08:53.390 --> 00:08:55.925
though the row index selection,

202
00:08:55.925 --> 00:08:58.310
and then as the second parameter,

203
00:08:58.310 --> 00:09:03.790
I want to project the name
and the score as columns.

204
00:09:03.790 --> 00:09:06.055
Take a look at that again,

205
00:09:06.055 --> 00:09:09.170
that the colon means that we
want to get all of the rows,

206
00:09:09.170 --> 00:09:11.480
and the list and
the second argument position is

207
00:09:11.480 --> 00:09:14.910
the list of the columns
that we want to get back.

208
00:09:16.280 --> 00:09:19.220
That's selecting and
projecting data from

209
00:09:19.220 --> 00:09:21.800
a DataFrame based on
row and column labels.

210
00:09:21.800 --> 00:09:24.530
The key concepts to
remember are that rows

211
00:09:24.530 --> 00:09:27.290
and columns are really
just for our benefit.

212
00:09:27.290 --> 00:09:30.580
Underneath this is
just a two-axis labeled array,

213
00:09:30.580 --> 00:09:33.230
and transposing the
columns is easy.

214
00:09:33.230 --> 00:09:35.510
Also consider the issue of

215
00:09:35.510 --> 00:09:38.190
chaining carefully
and try to avoid it,

216
00:09:38.190 --> 00:09:40.730
as it can cause
some unpredictable results,

217
00:09:40.730 --> 00:09:42.350
where your intent was to obtain

218
00:09:42.350 --> 00:09:44.000
a different view of the data,

219
00:09:44.000 --> 00:09:46.910
but instead Pandas
returns to you a copy.

220
00:09:46.910 --> 00:09:49.040
Before we leave the discussion

221
00:09:49.040 --> 00:09:51.140
of accessing data in DataFrames,

222
00:09:51.140 --> 00:09:52.865
let's talk about dropping data.

223
00:09:52.865 --> 00:09:56.240
It's easy to delete data
in series and DataFrames,

224
00:09:56.240 --> 00:09:58.825
and we can use
the drop function to do so.

225
00:09:58.825 --> 00:10:01.000
This function takes
a single parameter,

226
00:10:01.000 --> 00:10:03.595
which is the index or
row label to draw.

227
00:10:03.595 --> 00:10:06.245
This another tricky
place for new users.

228
00:10:06.245 --> 00:10:07.940
The drop function
doesn't actually

229
00:10:07.940 --> 00:10:10.054
change the DataFrame by default,

230
00:10:10.054 --> 00:10:12.500
instead the drop function
returns to you

231
00:10:12.500 --> 00:10:15.965
a copy of the DataFrame with
the given rows removed.

232
00:10:15.965 --> 00:10:18.430
So if we do df.drop(school1),

233
00:10:18.430 --> 00:10:21.245
it looks like a nice
changed DataFrame.

234
00:10:21.245 --> 00:10:23.255
But if we look at
our original DataFrame,

235
00:10:23.255 --> 00:10:27.410
we see the data is actually
still intact, so df.

236
00:10:27.410 --> 00:10:31.610
Drop has two interesting
optional parameters.

237
00:10:31.610 --> 00:10:33.530
The first is called in-place,

238
00:10:33.530 --> 00:10:34.925
and if it's set to true,

239
00:10:34.925 --> 00:10:36.500
the DataFrame will be updated in

240
00:10:36.500 --> 00:10:39.350
place instead of
a copy being returned.

241
00:10:39.350 --> 00:10:40.790
The second parameter is

242
00:10:40.790 --> 00:10:42.875
the axes, which
should be dropped.

243
00:10:42.875 --> 00:10:44.810
By default this value is zero,

244
00:10:44.810 --> 00:10:46.295
indicating the row axis.

245
00:10:46.295 --> 00:10:47.720
But you can change it to

246
00:10:47.720 --> 00:10:50.165
one if you wanted
to drop a column.

247
00:10:50.165 --> 00:10:52.730
For example, let's make a copy of

248
00:10:52.730 --> 00:10:55.355
the DataFrame using
the .copy function.

249
00:10:55.355 --> 00:10:59.165
So copy_df equals df.copy.

250
00:10:59.165 --> 00:11:02.465
Now let's drop the name
column in this copy.

251
00:11:02.465 --> 00:11:06.740
So copy df.drop, we say
the column we want to drop name,

252
00:11:06.740 --> 00:11:08.780
we say in-place equals the true,

253
00:11:08.780 --> 00:11:10.940
and then we set the axis because,

254
00:11:10.940 --> 00:11:13.160
it doesn't know that
this is a column.

255
00:11:13.160 --> 00:11:15.230
We set the axis equal to one to

256
00:11:15.230 --> 00:11:17.525
tell it that this
is named column,

257
00:11:17.525 --> 00:11:19.960
and then printout copy_df.

258
00:11:19.960 --> 00:11:22.280
There is a second way
to drop a column,

259
00:11:22.280 --> 00:11:23.330
and that's directly through

260
00:11:23.330 --> 00:11:25.070
the use of the indexing operator,

261
00:11:25.070 --> 00:11:26.590
using the del keyword.

262
00:11:26.590 --> 00:11:28.200
This way I'm dropping
data, however,

263
00:11:28.200 --> 00:11:29.750
takes immediate effect on

264
00:11:29.750 --> 00:11:31.985
the DataFrame and does
not return a view.

265
00:11:31.985 --> 00:11:36.200
So if we just say
del copy_df [class],

266
00:11:36.200 --> 00:11:37.639
and then printout copy_df,

267
00:11:37.639 --> 00:11:40.045
we see the class is gone.

268
00:11:40.045 --> 00:11:43.970
Finally, adding a new column
to the DataFrame is as

269
00:11:43.970 --> 00:11:45.695
easy as signing it to

270
00:11:45.695 --> 00:11:48.230
some value using
the indexing operator.

271
00:11:48.230 --> 00:11:50.360
For instance, if we
wanted to add a class

272
00:11:50.360 --> 00:11:52.910
ranking column with
default value of None,

273
00:11:52.910 --> 00:11:54.560
we could do so by using

274
00:11:54.560 --> 00:11:57.455
the assignment operator
after the square brackets.

275
00:11:57.455 --> 00:12:00.080
This broadcasts the default value

276
00:12:00.080 --> 00:12:02.225
to the new column immediately.

277
00:12:02.225 --> 00:12:07.890
So df[ClassRanking]
equals None and print df.

278
00:12:08.030 --> 00:12:11.150
In this lecture, you've learned
about the data structure

279
00:12:11.150 --> 00:12:14.105
you'll use the most in
pandas, the DataFrame.

280
00:12:14.105 --> 00:12:17.540
The DataFrame is indexed
both by row and column,

281
00:12:17.540 --> 00:12:18.950
and you can easily select

282
00:12:18.950 --> 00:12:20.630
individual rows and project

283
00:12:20.630 --> 00:12:22.100
the columns you're interested in,

284
00:12:22.100 --> 00:12:24.245
using the familiar
indexing methods

285
00:12:24.245 --> 00:12:25.735
from the Series class.

286
00:12:25.735 --> 00:12:27.710
You'll be gaining a lot
of experience with

287
00:12:27.710 --> 00:12:30.720
the DataFrame in
the content more to come.