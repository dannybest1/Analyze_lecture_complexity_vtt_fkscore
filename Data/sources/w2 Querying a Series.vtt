WEBVTT

1
00:00:05.180 --> 00:00:07.740
In this lecture we'll
talk about one of

2
00:00:07.740 --> 00:00:10.965
the primary data types of the
Pandas library, the Series.

3
00:00:10.965 --> 00:00:13.185
You'll learn about
the structure of the Series,

4
00:00:13.185 --> 00:00:14.355
how to query and merge

5
00:00:14.355 --> 00:00:16.800
Series objects together
and the importance of

6
00:00:16.800 --> 00:00:18.690
thinking about
parallelization when

7
00:00:18.690 --> 00:00:21.285
engaging in data
science programming.

8
00:00:21.285 --> 00:00:24.000
A Pandas Series can
be queried either by

9
00:00:24.000 --> 00:00:26.655
the index position
or the index label.

10
00:00:26.655 --> 00:00:30.500
If you don't give an index
to the series when querying,

11
00:00:30.500 --> 00:00:31.820
the position and the label are

12
00:00:31.820 --> 00:00:33.745
effectively the same values.

13
00:00:33.745 --> 00:00:37.370
To query by numeric locations
starting at zero,

14
00:00:37.370 --> 00:00:39.710
use the iloc attribute.

15
00:00:39.710 --> 00:00:41.615
To query by the index label,

16
00:00:41.615 --> 00:00:43.925
you can use the loc attribute.

17
00:00:43.925 --> 00:00:45.620
So let's start with an example.

18
00:00:45.620 --> 00:00:47.030
We'll use students enrolled in

19
00:00:47.030 --> 00:00:48.935
classes coming from a dictionary.

20
00:00:48.935 --> 00:00:51.290
So first we'll
import pandas as pd,

21
00:00:51.290 --> 00:00:53.000
as its norm, and then we'll

22
00:00:53.000 --> 00:00:55.010
create a dictionary
called student classes,

23
00:00:55.010 --> 00:00:57.590
and we'll take Alice
and put her in physics,

24
00:00:57.590 --> 00:01:02.785
Jack in chemistry, Molly in
English and Sam in history.

25
00:01:02.785 --> 00:01:04.775
And now we'll create
some new series

26
00:01:04.775 --> 00:01:05.810
from this dictionary with

27
00:01:05.810 --> 00:01:09.235
pd.Series and print
that to the screen.

28
00:01:09.235 --> 00:01:10.925
So for this series,

29
00:01:10.925 --> 00:01:13.810
if you wanted to see
the fourth entry we could

30
00:01:13.810 --> 00:01:16.855
use the iloc attribute
with the parameter three.

31
00:01:16.855 --> 00:01:19.720
So s.iloc sub three.

32
00:01:19.720 --> 00:01:22.345
Remember we always
start from zero.

33
00:01:22.345 --> 00:01:25.180
If you wanted to see
what class Molly has,

34
00:01:25.180 --> 00:01:28.780
we would use the loc attribute
with a parameter of Molly,

35
00:01:28.780 --> 00:01:32.090
so S.loc Sub Molly.

36
00:01:32.150 --> 00:01:34.870
So keep in mind that iloc and

37
00:01:34.870 --> 00:01:37.510
loc are not methods,
they're attributes.

38
00:01:37.510 --> 00:01:40.240
So you don't use
parentheses to query them,

39
00:01:40.240 --> 00:01:42.160
but square brackets instead.

40
00:01:42.160 --> 00:01:44.470
And this is called
the indexing operator.

41
00:01:44.470 --> 00:01:47.335
In Python this
calls or get or set

42
00:01:47.335 --> 00:01:50.495
for an item depending on
the context of its use.

43
00:01:50.495 --> 00:01:53.330
This might seem a bit
confusing if you're used

44
00:01:53.330 --> 00:01:55.805
to languages where
encapsulation of attributes,

45
00:01:55.805 --> 00:01:59.515
variables, and properties
is common, such as in Java.

46
00:01:59.515 --> 00:02:01.790
Pandas tries to make our code a

47
00:02:01.790 --> 00:02:03.815
bit more readable and
provides a sort of

48
00:02:03.815 --> 00:02:06.680
smart syntax using
the indexing operator

49
00:02:06.680 --> 00:02:08.855
directly on the series itself.

50
00:02:08.855 --> 00:02:12.140
For instance, if you pass
in an integer parameter,

51
00:02:12.140 --> 00:02:14.360
the operator will
behave as if you want

52
00:02:14.360 --> 00:02:16.775
to query via the iloc attribute.

53
00:02:16.775 --> 00:02:19.865
So we'll do s sub 3 and it's

54
00:02:19.865 --> 00:02:23.580
just as if we used
s.iloc sub 3.

55
00:02:23.580 --> 00:02:25.910
If you pass in an object,

56
00:02:25.910 --> 00:02:27.710
it will query as if
you wanted to use

57
00:02:27.710 --> 00:02:29.930
the label based on
the loc attribute.

58
00:02:29.930 --> 00:02:33.995
So s sub Molly actually
queries as if we did.

59
00:02:33.995 --> 00:02:36.200
S.loc sub Molly.

60
00:02:36.200 --> 00:02:38.360
So what happens if

61
00:02:38.360 --> 00:02:41.585
your index is actually
a list of integers?

62
00:02:41.585 --> 00:02:43.040
And this is a bit complicated and

63
00:02:43.040 --> 00:02:45.080
Pandas can't determine
automatically

64
00:02:45.080 --> 00:02:46.775
whether you're
intending to query by

65
00:02:46.775 --> 00:02:49.190
index position or index label.

66
00:02:49.190 --> 00:02:51.410
So you need to be careful
when you're using

67
00:02:51.410 --> 00:02:54.425
the indexing operator
on the series itself.

68
00:02:54.425 --> 00:02:57.320
The safer option is to
be more explicit and to

69
00:02:57.320 --> 00:03:00.680
use the iloc and loc
attributes directly.

70
00:03:00.680 --> 00:03:02.960
Here's an example using classes

71
00:03:02.960 --> 00:03:04.685
and their class code information,

72
00:03:04.685 --> 00:03:07.040
where classes are
indexed by class codes,

73
00:03:07.040 --> 00:03:08.575
in the form of integers.

74
00:03:08.575 --> 00:03:11.750
So let's create some new
dictionary class code.

75
00:03:11.750 --> 00:03:15.920
We'll say 99 maps to
physics, 100 to Chemistry,

76
00:03:15.920 --> 00:03:18.395
101 to English, and

77
00:03:18.395 --> 00:03:22.265
102 to history and we'll
create some new series.

78
00:03:22.265 --> 00:03:24.875
If we try and call s sub

79
00:03:24.875 --> 00:03:26.870
0 we're going
to get a key error

80
00:03:26.870 --> 00:03:28.190
because there's no item in

81
00:03:28.190 --> 00:03:30.950
the class list with
an index of zero.

82
00:03:30.950 --> 00:03:32.540
Instead we have to call iloc

83
00:03:32.540 --> 00:03:35.000
explicitly if we
want the first item.

84
00:03:35.000 --> 00:03:37.730
So s sub 0 and that gives

85
00:03:37.730 --> 00:03:41.045
us this nasty-looking key error.

86
00:03:41.045 --> 00:03:44.270
So that didn't call s.iloc

87
00:03:44.270 --> 00:03:46.980
sub 0 underneath
as one might expect,

88
00:03:46.980 --> 00:03:49.715
and instead it
generated this error.

89
00:03:49.715 --> 00:03:53.540
Now we know how to get
data out of the Series.

90
00:03:53.540 --> 00:03:55.700
Let's talk about
working with the data.

91
00:03:55.700 --> 00:03:59.000
A common task is to want to
consider all of the values

92
00:03:59.000 --> 00:04:02.285
inside of the Series and
do some sort of operation.

93
00:04:02.285 --> 00:04:04.880
This could be trying to
find a certain number or

94
00:04:04.880 --> 00:04:06.080
summarizing the data or

95
00:04:06.080 --> 00:04:08.585
transforming the data
in some kind of way.

96
00:04:08.585 --> 00:04:11.150
A typical programmatic approach

97
00:04:11.150 --> 00:04:12.950
to this would be to
iterate over all

98
00:04:12.950 --> 00:04:14.600
of the items in the Series and

99
00:04:14.600 --> 00:04:16.955
invoke the operation
one is interested in.

100
00:04:16.955 --> 00:04:19.550
For instance, we could
create a series of integers

101
00:04:19.550 --> 00:04:21.050
representing student grades and

102
00:04:21.050 --> 00:04:22.790
just try and get
the average grade.

103
00:04:22.790 --> 00:04:24.190
So let's do that.

104
00:04:24.190 --> 00:04:27.230
Grades equals pd.Series and

105
00:04:27.230 --> 00:04:29.210
we'll pass in a list
of all of the grades,

106
00:04:29.210 --> 00:04:32.060
90, 80, 70, 60.

107
00:04:32.060 --> 00:04:35.165
Then we create
some counting variable total

108
00:04:35.165 --> 00:04:36.785
and then we'll just iterate.

109
00:04:36.785 --> 00:04:38.510
So for grade in grades,

110
00:04:38.510 --> 00:04:41.960
total is equal to itself plus
the grade and then we're

111
00:04:41.960 --> 00:04:43.235
just going to print out

112
00:04:43.235 --> 00:04:45.245
the total divided by
the length of grade.

113
00:04:45.245 --> 00:04:47.980
So just a very simple
averaging function.

114
00:04:47.980 --> 00:04:50.430
This works but it's slow,

115
00:04:50.430 --> 00:04:53.355
Modern computers can do
many tasks simultaneously,

116
00:04:53.355 --> 00:04:57.230
especially, but not only,
tasks involving mathematics.

117
00:04:57.230 --> 00:05:00.170
Pandas and the underlying
numpy library support a

118
00:05:00.170 --> 00:05:03.365
number of methods
for computation and

119
00:05:03.365 --> 00:05:06.860
vectorization in
particular works with most

120
00:05:06.860 --> 00:05:08.750
of the functions in
the numpy library

121
00:05:08.750 --> 00:05:11.080
including the sum loc function.

122
00:05:11.080 --> 00:05:13.625
Here's how we would
really write the code

123
00:05:13.625 --> 00:05:16.040
using the numpy sum method.

124
00:05:16.040 --> 00:05:18.665
First we need to import
the numpy module.

125
00:05:18.665 --> 00:05:21.610
So import numpy as np,

126
00:05:21.610 --> 00:05:26.085
then we'll just call np.sum
and pass in an iterable item.

127
00:05:26.085 --> 00:05:28.460
In this case, our panda series.

128
00:05:28.460 --> 00:05:32.150
So we say total equals
np.sum and we pass in

129
00:05:32.150 --> 00:05:34.280
grades and then we just
print out the total

130
00:05:34.280 --> 00:05:37.310
divided by the length of grades.

131
00:05:37.310 --> 00:05:40.160
Now both of the methods
I just showed create

132
00:05:40.160 --> 00:05:42.920
the same value but is
one actually faster.

133
00:05:42.920 --> 00:05:46.630
The Jupyter notebook has
a magic function which can help.

134
00:05:46.630 --> 00:05:49.880
So first let's create
a big series of random numbers,

135
00:05:49.880 --> 00:05:51.440
and this is actually
used a lot when

136
00:05:51.440 --> 00:05:53.465
demonstrating
techniques with pandas.

137
00:05:53.465 --> 00:05:55.310
So you should get
used to seeing this.

138
00:05:55.310 --> 00:05:59.090
So numbers equals, and
we'll just do pd.Series,

139
00:05:59.090 --> 00:06:00.485
and then here we just call

140
00:06:00.485 --> 00:06:03.395
np.random.randint
and then we pass it

141
00:06:03.395 --> 00:06:06.470
some parameters indicating
how many random numbers

142
00:06:06.470 --> 00:06:09.650
we want and what we want
those numbers between.

143
00:06:09.650 --> 00:06:11.660
So here I'm asking for 10,000

144
00:06:11.660 --> 00:06:14.720
random numbers
between 0 and 1000.

145
00:06:14.720 --> 00:06:17.240
Now let's look at
the top five items in

146
00:06:17.240 --> 00:06:20.045
the series to make sure
they actually seem random.

147
00:06:20.045 --> 00:06:22.050
And we could do this with
the head function.

148
00:06:22.050 --> 00:06:25.625
So if we do numbers.head
remember this is a series.

149
00:06:25.625 --> 00:06:30.040
We're able to see what
the first five numbers are.

150
00:06:30.040 --> 00:06:32.300
We can actually
verify the length of

151
00:06:32.300 --> 00:06:35.045
the series is correct
using the len function.

152
00:06:35.045 --> 00:06:37.590
So if we do len numbers
in the series,

153
00:06:37.590 --> 00:06:40.210
we get 10,000 which is
what we're looking for.

154
00:06:40.210 --> 00:06:43.535
Okay. So now we're confident
that we have a big series.

155
00:06:43.535 --> 00:06:45.440
The IPython interpreter has

156
00:06:45.440 --> 00:06:47.120
something called magic functions,

157
00:06:47.120 --> 00:06:48.980
that begin with
a percentage sign.

158
00:06:48.980 --> 00:06:51.620
If we type this sign
and hit the Tab key you

159
00:06:51.620 --> 00:06:54.605
can see a list of
the available magic functions.

160
00:06:54.605 --> 00:06:56.690
You can write your own
magic functions too,

161
00:06:56.690 --> 00:06:58.070
but that's a little bit outside

162
00:06:58.070 --> 00:06:59.960
of the scope of this course.

163
00:06:59.960 --> 00:07:02.210
So here we're
actually going to use

164
00:07:02.210 --> 00:07:03.995
a cellular magic function.

165
00:07:03.995 --> 00:07:06.050
These start with
two percentage signs

166
00:07:06.050 --> 00:07:08.555
and wrap the code in
the current Jupyter cell.

167
00:07:08.555 --> 00:07:11.510
The function we're going
to use is called timeit.

168
00:07:11.510 --> 00:07:13.970
This function will
run our code a few

169
00:07:13.970 --> 00:07:17.270
times to determine on
average how long it takes.

170
00:07:17.270 --> 00:07:21.065
So let's run timeit with
our original iterative code.

171
00:07:21.065 --> 00:07:22.760
You can give timeit the number of

172
00:07:22.760 --> 00:07:24.320
loops that you would like to run.

173
00:07:24.320 --> 00:07:26.735
By default it's 1000 loops.

174
00:07:26.735 --> 00:07:28.235
I'll ask timeit here to use

175
00:07:28.235 --> 00:07:30.380
a 100 runs because
we're recording this.

176
00:07:30.380 --> 00:07:33.740
Note that in order to use
the cellular magic function,

177
00:07:33.740 --> 00:07:36.535
it has to be the first
line of each cell.

178
00:07:36.535 --> 00:07:38.760
So two percentage signs,

179
00:07:38.760 --> 00:07:41.180
timeit is the function that
we're interested in running,

180
00:07:41.180 --> 00:07:44.180
and we'll pass in
a parameter of 100.

181
00:07:44.180 --> 00:07:47.090
Now, we'll just write
our cell as normal.

182
00:07:47.090 --> 00:07:49.520
So we'll set total
equals to 0 for

183
00:07:49.520 --> 00:07:53.090
number in numbers total,
we're just incrementing it.

184
00:07:53.090 --> 00:07:55.355
And now we're going to divide
total by the length.

185
00:07:55.355 --> 00:07:57.575
So this is just the function
we saw before.

186
00:07:57.575 --> 00:08:00.050
All right, not bad.
Time it ran the code,

187
00:08:00.050 --> 00:08:02.225
and it doesn't seem to
take very long at all.

188
00:08:02.225 --> 00:08:05.000
Now let's try with vectorization.

189
00:08:05.000 --> 00:08:07.190
So we'll just use time

190
00:08:07.190 --> 00:08:09.575
it with two percentage signs
at the beginning.

191
00:08:09.575 --> 00:08:12.305
We'll pass in a parameter
of a 100 again.

192
00:08:12.305 --> 00:08:15.680
We'll make the total equal
to np.sum the numbers,

193
00:08:15.680 --> 00:08:17.720
and we'll divide total by

194
00:08:17.720 --> 00:08:21.105
the length of numbers.
And we'll give this a run.

195
00:08:21.105 --> 00:08:24.520
Wow, this is a pretty shocking
difference in the speed,

196
00:08:24.520 --> 00:08:26.050
and demonstrates
why one should be

197
00:08:26.050 --> 00:08:28.195
aware of parallel
computing features,

198
00:08:28.195 --> 00:08:31.255
and start thinking in
functional programming terms.

199
00:08:31.255 --> 00:08:34.540
Put more simply vectorization
is the ability for

200
00:08:34.540 --> 00:08:37.915
a computer to execute multiple
instructions at once,

201
00:08:37.915 --> 00:08:41.320
with high-performance chips,
especially graphics cards,

202
00:08:41.320 --> 00:08:43.815
you can get dynamics speedups.

203
00:08:43.815 --> 00:08:45.965
Modern graphics cards can run

204
00:08:45.965 --> 00:08:48.875
thousands of instructions
in parallel.

205
00:08:48.875 --> 00:08:51.170
A related feature in Pandas and

206
00:08:51.170 --> 00:08:52.880
NumPy is called broadcasting.

207
00:08:52.880 --> 00:08:55.400
With broadcasting, we
can apply an operation

208
00:08:55.400 --> 00:08:58.325
to every value in the series
changing the series.

209
00:08:58.325 --> 00:09:00.050
For instance, if we wanted to

210
00:09:00.050 --> 00:09:02.525
increase every random
variable by two,

211
00:09:02.525 --> 00:09:03.980
we could do so quickly using

212
00:09:03.980 --> 00:09:07.445
the plus equals operator
directly on the series object.

213
00:09:07.445 --> 00:09:10.680
Let's look at the head of
our series, so s.head.

214
00:09:10.900 --> 00:09:14.810
Now, let's just increase
everything in the series by two,

215
00:09:14.810 --> 00:09:17.105
so s plus equals 2.

216
00:09:17.105 --> 00:09:20.300
So here we're applying
the plus equals operator,

217
00:09:20.300 --> 00:09:23.630
directly to the series object
not a single value.

218
00:09:23.630 --> 00:09:25.955
Now, let's look at the head.

219
00:09:25.955 --> 00:09:28.880
The procedural way of
doing this would be to

220
00:09:28.880 --> 00:09:30.980
iterate through all of
the items in the series,

221
00:09:30.980 --> 00:09:33.080
and increase the values directly.

222
00:09:33.080 --> 00:09:34.940
Pandas does support iterating

223
00:09:34.940 --> 00:09:36.935
through the series much
like a dictionary,

224
00:09:36.935 --> 00:09:39.275
allowing you to
unpack values easily.

225
00:09:39.275 --> 00:09:41.660
So we can use
the iteritems function in

226
00:09:41.660 --> 00:09:44.165
particular which returns
a label and value.

227
00:09:44.165 --> 00:09:48.365
So for label and
value in s.iteritems.

228
00:09:48.365 --> 00:09:49.910
Now for the item which is

229
00:09:49.910 --> 00:09:51.725
returned let's call
the set_value.

230
00:09:51.725 --> 00:09:54.800
So s.set_value, we indicate

231
00:09:54.800 --> 00:09:56.420
the label and we
say the value would

232
00:09:56.420 --> 00:09:58.280
just want to increment
that by two.

233
00:09:58.280 --> 00:10:00.440
And then let's check
the result of this

234
00:10:00.440 --> 00:10:04.110
for loop computation by
looking at the head.

235
00:10:04.810 --> 00:10:07.400
So the result is the same,

236
00:10:07.400 --> 00:10:09.290
though you may notice
a warning depending

237
00:10:09.290 --> 00:10:11.435
on the version of
Pandas being used.

238
00:10:11.435 --> 00:10:13.430
But if you find
yourself iterating

239
00:10:13.430 --> 00:10:15.635
pretty much anytime in Pandas,

240
00:10:15.635 --> 00:10:17.120
you should question
whether you're

241
00:10:17.120 --> 00:10:19.820
doing things in
the best possible way.

242
00:10:19.820 --> 00:10:22.940
Let's take a look at
some speed comparisons.

243
00:10:22.940 --> 00:10:26.405
First, let's try five loops
using the iterative approach.

244
00:10:26.405 --> 00:10:32.300
So we'll call timeit minus
n and I'll use 10 here.

245
00:10:32.300 --> 00:10:35.660
We'll create a blank new series
of items to deal with.

246
00:10:35.660 --> 00:10:37.955
Always good when timing
to create a new series.

247
00:10:37.955 --> 00:10:41.450
So we use our
np.random.randit with

248
00:10:41.450 --> 00:10:43.970
three parameters
the first two being

249
00:10:43.970 --> 00:10:46.895
the range of our data values,

250
00:10:46.895 --> 00:10:48.710
and the next one being
the number of values.

251
00:10:48.710 --> 00:10:50.645
Well, add 1,000 items in there.

252
00:10:50.645 --> 00:10:53.030
We'll just rewrite
our loop from above.

253
00:10:53.030 --> 00:10:57.530
So for label value
in s.iteritems,

254
00:10:57.530 --> 00:11:02.160
s.loc label equals
value plus two.

255
00:11:02.320 --> 00:11:06.575
Now, let's try using
that broadcasting method.

256
00:11:06.575 --> 00:11:09.770
So will time it with
10 loops again.

257
00:11:09.770 --> 00:11:12.230
We need to recreate
the series so s equals

258
00:11:12.230 --> 00:11:15.920
pd.Series and will
pass in and our values,

259
00:11:15.920 --> 00:11:17.810
and now we're just
going to broadcast with

260
00:11:17.810 --> 00:11:20.465
plus equals so s plus equals 2.

261
00:11:20.465 --> 00:11:23.840
Amazing, not only is it
significantly faster,

262
00:11:23.840 --> 00:11:27.200
but it's more concise and
even easier to read to.

263
00:11:27.200 --> 00:11:29.600
The typical
mathematical operations

264
00:11:29.600 --> 00:11:31.700
that you would expect
are vectorized and

265
00:11:31.700 --> 00:11:33.980
the NumPy documentation
outlines what it would

266
00:11:33.980 --> 00:11:37.070
take to create vectorized
functions of your own.

267
00:11:37.070 --> 00:11:38.960
One last note on using

268
00:11:38.960 --> 00:11:42.170
the indexing operator
to access series data.

269
00:11:42.170 --> 00:11:43.970
The .loc attribute,

270
00:11:43.970 --> 00:11:46.160
lets you not only
modify data in place,

271
00:11:46.160 --> 00:11:48.365
but also add new data as well.

272
00:11:48.365 --> 00:11:52.265
If the value you passed in
as the index doesn't exist,

273
00:11:52.265 --> 00:11:54.200
then a new entry is created.

274
00:11:54.200 --> 00:11:56.975
Keep in mind indices
can have mixed types.

275
00:11:56.975 --> 00:11:58.700
While it's important
to be aware of

276
00:11:58.700 --> 00:12:00.380
the typing going on underneath,

277
00:12:00.380 --> 00:12:02.480
Pandas will automatically change

278
00:12:02.480 --> 00:12:05.325
the underlying NumPy types
as appropriate.

279
00:12:05.325 --> 00:12:08.440
Here's an example using
a series of a few numbers.

280
00:12:08.440 --> 00:12:11.845
So s equals pd.Series
1, 2, and 3.

281
00:12:11.845 --> 00:12:13.510
Let's add some new value,

282
00:12:13.510 --> 00:12:14.905
maybe a university course.

283
00:12:14.905 --> 00:12:19.185
So s.loc sub history equals 102.

284
00:12:19.185 --> 00:12:22.820
Let's look at s. We see that

285
00:12:22.820 --> 00:12:24.770
mixed types for data values or

286
00:12:24.770 --> 00:12:27.455
index labels are
no problem for Pandas.

287
00:12:27.455 --> 00:12:30.500
Since history is not in
the original list of indices,

288
00:12:30.500 --> 00:12:33.500
s.loc sub history
essentially creates

289
00:12:33.500 --> 00:12:35.030
a new element in the series

290
00:12:35.030 --> 00:12:36.860
with the index name of history,

291
00:12:36.860 --> 00:12:39.195
and the value of 102.

292
00:12:39.195 --> 00:12:42.430
Up until now, I've
shown only examples of

293
00:12:42.430 --> 00:12:45.360
a series where the
index values were unique.

294
00:12:45.360 --> 00:12:47.390
I want to end
this lecture by showing

295
00:12:47.390 --> 00:12:49.985
an example where
index values are not unique,

296
00:12:49.985 --> 00:12:52.850
and this makes the Pandas series
a little different

297
00:12:52.850 --> 00:12:56.450
conceptually than for instance
a relational database.

298
00:12:56.450 --> 00:12:58.370
Let's create a series with

299
00:12:58.370 --> 00:13:00.710
students and courses
which they've taken.

300
00:13:00.710 --> 00:13:03.710
So student classes
equals pd.Series.

301
00:13:03.710 --> 00:13:05.330
While Alice in Physics,

302
00:13:05.330 --> 00:13:07.025
we'll put Jack in Chemistry,

303
00:13:07.025 --> 00:13:09.695
Molly in English,
and Sam in history.

304
00:13:09.695 --> 00:13:12.140
Let's print out
those student classes.

305
00:13:12.140 --> 00:13:15.560
Now, let's create a series
just for some new student

306
00:13:15.560 --> 00:13:19.430
Kelly which lists all of
the courses that she's taken.

307
00:13:19.430 --> 00:13:21.320
We'll set the index to Kelly and

308
00:13:21.320 --> 00:13:23.405
the data to be the names
of the courses.

309
00:13:23.405 --> 00:13:27.335
So we'll create some new series
of Kelly classes,

310
00:13:27.335 --> 00:13:30.680
we'll say she's taken
Philosophy, Arts, and Math.

311
00:13:30.680 --> 00:13:33.950
And the index for this will just
be Kelly, Kelly, and Kelly.

312
00:13:33.950 --> 00:13:36.710
Let's take a look at
what that looks like.

313
00:13:36.710 --> 00:13:39.530
Finally, we can append
all of the data in

314
00:13:39.530 --> 00:13:43.475
this new series to the first
using the .append function.

315
00:13:43.475 --> 00:13:46.505
So create some variable
all student classes,

316
00:13:46.505 --> 00:13:47.825
and it's just equal to

317
00:13:47.825 --> 00:13:51.275
student_classes.append
Kelly class.

318
00:13:51.275 --> 00:13:53.090
This creates a series which has

319
00:13:53.090 --> 00:13:54.800
our original people in it as

320
00:13:54.800 --> 00:13:56.765
well as all of Kelly's courses.

321
00:13:56.765 --> 00:13:58.880
Let's take a look at that.

322
00:13:58.880 --> 00:14:01.910
There are a couple of
important considerations

323
00:14:01.910 --> 00:14:03.650
when using .append.

324
00:14:03.650 --> 00:14:06.350
First, Pandas will
take the series and

325
00:14:06.350 --> 00:14:09.290
try to infer the best
data types to use.

326
00:14:09.290 --> 00:14:11.150
In this example, everything is

327
00:14:11.150 --> 00:14:13.505
a string so there's
no problems here.

328
00:14:13.505 --> 00:14:16.100
Second, the append method doesn't

329
00:14:16.100 --> 00:14:18.560
actually change
the underlying series objects.

330
00:14:18.560 --> 00:14:20.600
It instead returns a new series

331
00:14:20.600 --> 00:14:22.790
which is made up of the
two appended together.

332
00:14:22.790 --> 00:14:25.940
This is actually
a common pattern in Pandas by

333
00:14:25.940 --> 00:14:27.875
default returning a new object

334
00:14:27.875 --> 00:14:29.900
instead of modifying
one in place.

335
00:14:29.900 --> 00:14:32.420
It's one that you
should come to expect.

336
00:14:32.420 --> 00:14:34.370
By printing the original series,

337
00:14:34.370 --> 00:14:36.710
we can see that that series
hasn't changed.

338
00:14:36.710 --> 00:14:39.320
So here and we'll
take a look at it.

339
00:14:39.320 --> 00:14:41.825
Finally, we can see that when we

340
00:14:41.825 --> 00:14:44.195
query the appended
series for Kelly,

341
00:14:44.195 --> 00:14:46.130
we don't get a single value,

342
00:14:46.130 --> 00:14:48.065
but a series itself.

343
00:14:48.065 --> 00:14:52.220
So if we take all student
classes.loc sub Kelly,

344
00:14:52.220 --> 00:14:55.115
we actually get a series itself.

345
00:14:55.115 --> 00:14:57.800
In this lecture, we
focused on one of

346
00:14:57.800 --> 00:15:01.295
the primary data types of the
Pandas library the series.

347
00:15:01.295 --> 00:15:04.670
You'll learn how to query
the series with .loc and .iloc,

348
00:15:04.670 --> 00:15:07.625
that the series is
an index data structure.

349
00:15:07.625 --> 00:15:10.730
How to merge two series objects
together with append,

350
00:15:10.730 --> 00:15:13.400
and the importance
of vectorization.

351
00:15:13.400 --> 00:15:16.100
There are many more methods
associated with

352
00:15:16.100 --> 00:15:18.635
the series object that
we haven't talked about.

353
00:15:18.635 --> 00:15:20.180
But with these basics down,

354
00:15:20.180 --> 00:15:21.560
we'll move on to talking about

355
00:15:21.560 --> 00:15:24.485
Panda's two-dimensional data
structure, the DataFrame.

356
00:15:24.485 --> 00:15:27.635
The DataFrame is very similar
to the series object,

357
00:15:27.635 --> 00:15:29.810
but includes multiple
columns of data,

358
00:15:29.810 --> 00:15:32.150
and is the structure you'll
spend the majority of

359
00:15:32.150 --> 00:15:36.060
your time working on when
cleaning and aggregating data.