WEBVTT

1
00:00:05.240 --> 00:00:07.410
In this lecture,
we're going to talk

2
00:00:07.410 --> 00:00:08.970
about querying DataFrames.

3
00:00:08.970 --> 00:00:10.680
The first step in the process is

4
00:00:10.680 --> 00:00:12.240
to understand Boolean masking.

5
00:00:12.240 --> 00:00:14.280
A Boolean masking is the heart of

6
00:00:14.280 --> 00:00:15.720
first and efficient querying in

7
00:00:15.720 --> 00:00:17.535
both NumPy and in Pandas,

8
00:00:17.535 --> 00:00:19.215
and it's analogous a bit to 

9
00:00:19.215 --> 00:00:22.590
bit masking which is used in
other areas of computer science.

10
00:00:22.590 --> 00:00:23.850
By the end of this lecture,

11
00:00:23.850 --> 00:00:26.720
you'll understand how Boolean
masking works and how to

12
00:00:26.720 --> 00:00:28.220
apply this to a DataFrame to

13
00:00:28.220 --> 00:00:30.355
get out the data that
you're interested in.

14
00:00:30.355 --> 00:00:33.050
Now, a Boolean mask is
an array which can be

15
00:00:33.050 --> 00:00:35.530
thought of as a one
dimension like a series,

16
00:00:35.530 --> 00:00:37.605
or two-dimensions
like a DataFrame,

17
00:00:37.605 --> 00:00:39.020
where each of the values of

18
00:00:39.020 --> 00:00:40.925
the array are either
true or false.

19
00:00:40.925 --> 00:00:43.430
This array is essentially
overlaid on top

20
00:00:43.430 --> 00:00:45.800
of the other data structure
that we're querying,

21
00:00:45.800 --> 00:00:47.660
and any cell aligned
with the true value

22
00:00:47.660 --> 00:00:49.620
will be admitted into
our final result,

23
00:00:49.620 --> 00:00:52.175
and any cell aligned with
the false value will not.

24
00:00:52.175 --> 00:00:55.535
Let's take a look. So let's

25
00:00:55.535 --> 00:00:57.110
start with an example and

26
00:00:57.110 --> 00:00:59.240
import our graduate
admissions dataset.

27
00:00:59.240 --> 00:01:00.800
So first we'll bring in pandas.

28
00:01:00.800 --> 00:01:02.990
So import pandas as pd,

29
00:01:02.990 --> 00:01:05.510
then we'll load in
our CSV data file.

30
00:01:05.510 --> 00:01:10.475
So we'll make a new variable df
as equal to pd.CSV,

31
00:01:10.475 --> 00:01:13.390
and remember we're going to
use our index column zero,

32
00:01:13.390 --> 00:01:15.005
and then we're going
to clean this up,

33
00:01:15.005 --> 00:01:17.230
and fix a couple of
the poorly named columns

34
00:01:17.230 --> 00:01:18.820
like we did in previous lecture.

35
00:01:18.820 --> 00:01:21.415
So I'm going to use
our list comprehension here

36
00:01:21.415 --> 00:01:24.970
x.lower.strip for
x in df.columns.

37
00:01:24.970 --> 00:01:27.670
So these is just iterating
over a bunch of strings,

38
00:01:27.670 --> 00:01:29.290
and turning them lower case,

39
00:01:29.290 --> 00:01:32.170
and stripping out whitespace
from either side,

40
00:01:32.170 --> 00:01:34.850
and let's take a look
at the results.

41
00:01:36.080 --> 00:01:39.340
So Boolean masks are
created by applying

42
00:01:39.340 --> 00:01:40.720
operators directly to

43
00:01:40.720 --> 00:01:43.085
the pandas series or
DataFrame object.

44
00:01:43.085 --> 00:01:45.665
For instance, in our graduate
admission dataset,

45
00:01:45.665 --> 00:01:47.950
we might be interested in
seeing only those students that

46
00:01:47.950 --> 00:01:51.350
have chance higher than
0.7 of being admitted.

47
00:01:51.350 --> 00:01:53.680
To build a Boolean mask
for this query,

48
00:01:53.680 --> 00:01:56.440
we want to project the chance
of admit column using

49
00:01:56.440 --> 00:01:58.450
the indexing operator
and apply the

50
00:01:58.450 --> 00:02:02.080
greater than operator where
the comparison value of 0.7.

51
00:02:02.080 --> 00:02:05.800
This is essentially broadcasting
a comparison operator,

52
00:02:05.800 --> 00:02:07.540
greater than, with the results

53
00:02:07.540 --> 00:02:09.790
being returned as
a Boolean series.

54
00:02:09.790 --> 00:02:12.010
The resultant series is indexed

55
00:02:12.010 --> 00:02:14.290
where the value of
each cell is either true or

56
00:02:14.290 --> 00:02:16.750
false depending on
whether a student has

57
00:02:16.750 --> 00:02:19.570
a chance of admission
higher than 0.7.

58
00:02:19.570 --> 00:02:22.200
So we'll create this thing
called an admit mask,

59
00:02:22.200 --> 00:02:25.290
and we'll say df
sub chance of admit,

60
00:02:25.290 --> 00:02:28.330
and then we're going to
broadcast against this columns.

61
00:02:28.330 --> 00:02:30.610
So remember we're just
projecting a single column.

62
00:02:30.610 --> 00:02:35.220
The greater than operator and
pass it a value of 0.7,

63
00:02:35.220 --> 00:02:39.040
and let's take a look at what
that mid-month mask it is.

64
00:02:39.040 --> 00:02:41.605
So this is pretty fundamentals.

65
00:02:41.605 --> 00:02:43.175
So take a moment to look at this.

66
00:02:43.175 --> 00:02:45.140
The result of broadcasting

67
00:02:45.140 --> 00:02:48.080
a comparison operator
is a Boolean mask,

68
00:02:48.080 --> 00:02:49.460
true or false values depending

69
00:02:49.460 --> 00:02:51.605
on the results of the comparison.

70
00:02:51.605 --> 00:02:53.690
Underneath, pandas is applying

71
00:02:53.690 --> 00:02:55.025
the comparison operator that

72
00:02:55.025 --> 00:02:57.275
you specified through
vectorization.

73
00:02:57.275 --> 00:02:59.780
So it's efficiently
and in parallel

74
00:02:59.780 --> 00:03:02.659
to all of the values in
the array that you specified,

75
00:03:02.659 --> 00:03:04.520
which in this case, is the chance

76
00:03:04.520 --> 00:03:06.590
of admit column of the DataFrame.

77
00:03:06.590 --> 00:03:08.810
The result is a series objects,

78
00:03:08.810 --> 00:03:10.910
since only one column
is being operated

79
00:03:10.910 --> 00:03:13.790
on filled with
either true or false values,

80
00:03:13.790 --> 00:03:16.675
which is what the comparison
operator returns.

81
00:03:16.675 --> 00:03:19.480
So what do you do
with the Boolean mask

82
00:03:19.480 --> 00:03:20.600
once you formed it?

83
00:03:20.600 --> 00:03:22.270
Well, you could just
lay it on top of

84
00:03:22.270 --> 00:03:24.565
the data and to hide the
data that you don't want,

85
00:03:24.565 --> 00:03:27.085
which is represented by
all the false values.

86
00:03:27.085 --> 00:03:28.630
We do this by using

87
00:03:28.630 --> 00:03:31.510
the .where function on
the original DataFrame.

88
00:03:31.510 --> 00:03:33.640
So df.where, and we're just

89
00:03:33.640 --> 00:03:35.980
pass in a single parameter
the admit mask,

90
00:03:35.980 --> 00:03:39.130
and let's take a look at what
that DataFrame looks like,

91
00:03:39.130 --> 00:03:41.275
and we'll add the dot head.

92
00:03:41.275 --> 00:03:43.930
So we see that
the resulting DataFrame

93
00:03:43.930 --> 00:03:46.240
keeps the original index values,

94
00:03:46.240 --> 00:03:49.375
and only data which met
the condition was retained.

95
00:03:49.375 --> 00:03:51.310
All of the rows
which did not meet

96
00:03:51.310 --> 00:03:53.919
the condition have
NaN data instead,

97
00:03:53.919 --> 00:03:56.590
but these rows weren't
dropped from our dataset.

98
00:03:56.590 --> 00:03:59.285
They're still there.
They're just not a number.

99
00:03:59.285 --> 00:04:01.485
The next step is, of course,

100
00:04:01.485 --> 00:04:03.105
if we don't want the NaN data

101
00:04:03.105 --> 00:04:04.925
that we use dropna function,

102
00:04:04.925 --> 00:04:06.130
and this is quite common.

103
00:04:06.130 --> 00:04:08.065
So we actually use df.where,

104
00:04:08.065 --> 00:04:10.045
passing the admit mask, and then,

105
00:04:10.045 --> 00:04:12.565
on that resulting
DataFrame called dropna,

106
00:04:12.565 --> 00:04:15.100
and then on that,
called dot head.

107
00:04:15.100 --> 00:04:17.380
So the return data frame now has

108
00:04:17.380 --> 00:04:19.105
all of the NAN rows dropped.

109
00:04:19.105 --> 00:04:21.280
Notice that the index
now includes one

110
00:04:21.280 --> 00:04:24.640
through four and
six, but not five.

111
00:04:24.640 --> 00:04:26.920
Despite being really handy,

112
00:04:26.920 --> 00:04:29.605
where isn't actually
used that often?

113
00:04:29.605 --> 00:04:31.570
Instead, the panda devs created

114
00:04:31.570 --> 00:04:35.730
a shorthand syntax which
combines where and dropna,

115
00:04:35.730 --> 00:04:37.335
doing both at once,

116
00:04:37.335 --> 00:04:39.020
and in typical fashion,

117
00:04:39.020 --> 00:04:42.700
the just to overloaded the
indexing operator to do this.

118
00:04:42.700 --> 00:04:44.425
So here's an example.

119
00:04:44.425 --> 00:04:48.670
So we do df, and then inside
of the indexing operator,

120
00:04:48.670 --> 00:04:52.510
we actually put our computation
for the Boolean mask.

121
00:04:52.510 --> 00:04:57.170
So df sub chance of admit,
greater than 0.7.head.

122
00:04:57.900 --> 00:05:01.360
So I personally find that
much harder to read,

123
00:05:01.360 --> 00:05:02.710
but it's super common when

124
00:05:02.710 --> 00:05:04.090
you're reading
other people's code.

125
00:05:04.090 --> 00:05:05.140
So it's important to be able to

126
00:05:05.140 --> 00:05:06.805
understand it and to write it.

127
00:05:06.805 --> 00:05:10.255
Just reviewing this indexing
operator on the DataFrame,

128
00:05:10.255 --> 00:05:11.950
it now does three things.

129
00:05:11.950 --> 00:05:13.660
So first, it can be called with

130
00:05:13.660 --> 00:05:16.510
a string parameter to
project a single column.

131
00:05:16.510 --> 00:05:20.230
So if we do df sub
gre score.head,

132
00:05:20.230 --> 00:05:22.040
we get a single column,

133
00:05:22.040 --> 00:05:25.790
or you can send it a list
of columns as strings.

134
00:05:25.790 --> 00:05:29.510
So df sub gre score,
and toefl score,

135
00:05:29.510 --> 00:05:32.090
as sub parameter list,

136
00:05:32.090 --> 00:05:35.885
or now you can send
it a Boolean mask.

137
00:05:35.885 --> 00:05:38.330
So df and then we put
in here let's say

138
00:05:38.330 --> 00:05:41.840
df sub gre score is
greater than 320,

139
00:05:41.840 --> 00:05:43.750
and look at the head of that.

140
00:05:43.750 --> 00:05:45.935
Each of these is mimicking

141
00:05:45.935 --> 00:05:47.930
functionality from
either dot loc,

142
00:05:47.930 --> 00:05:50.610
or dot where, dot dropna.

143
00:05:51.650 --> 00:05:54.180
Before we leave this,
let's talk about

144
00:05:54.180 --> 00:05:56.515
combining multiple Boolean masks,

145
00:05:56.515 --> 00:05:59.285
such as multiple criteria
for including.

146
00:05:59.285 --> 00:06:02.420
In bit masking and other places
in computer science,

147
00:06:02.420 --> 00:06:04.025
this is done with "and".

148
00:06:04.025 --> 00:06:07.325
If both masks must be
True, for a True value,

149
00:06:07.325 --> 00:06:09.110
and to be in the final mask,

150
00:06:09.110 --> 00:06:12.535
or "or" if only one
needs to be True.

151
00:06:12.535 --> 00:06:14.780
Unfortunately, it doesn't feel

152
00:06:14.780 --> 00:06:16.670
quite as natural in pandas.

153
00:06:16.670 --> 00:06:18.680
For instance, if you want to take

154
00:06:18.680 --> 00:06:21.830
two Boolean series and
add them together.

155
00:06:21.830 --> 00:06:25.250
So here we do df
sub chance of admit,

156
00:06:25.250 --> 00:06:27.980
greater than 0.7, and
let's say we want

157
00:06:27.980 --> 00:06:30.770
df sub chance of
admit, less than 0.9.

158
00:06:30.770 --> 00:06:32.210
So maybe these is the people who

159
00:06:32.210 --> 00:06:34.025
got close to getting admissions,

160
00:06:34.025 --> 00:06:37.135
we want to encourage
them to apply again.

161
00:06:37.135 --> 00:06:41.355
But that didn't work and despite
using pandas for awhile,

162
00:06:41.355 --> 00:06:45.365
I actually find a regularly try
and do what I just did.

163
00:06:45.365 --> 00:06:48.920
The problem is that you have
a series object and Python

164
00:06:48.920 --> 00:06:50.690
underneath doesn't
know how to compare

165
00:06:50.690 --> 00:06:53.580
two series using AND, or, Or.

166
00:06:53.580 --> 00:06:56.540
Instead, the pandas author
have overwritten

167
00:06:56.540 --> 00:07:00.290
the pipe and ampersand operator
to handle this for us.

168
00:07:00.290 --> 00:07:03.170
So we actually have to write
df sub chance of admit,

169
00:07:03.170 --> 00:07:07.690
and then we use the ampersand
sign to and these together,

170
00:07:07.690 --> 00:07:11.230
and so here we can see
this the combination,

171
00:07:11.230 --> 00:07:15.410
the bitwise AND of
our two Boolean masks.

172
00:07:15.410 --> 00:07:18.440
So one other thing to watch
out for is the order of

173
00:07:18.440 --> 00:07:21.560
operations and this gets
me regularly as well.

174
00:07:21.560 --> 00:07:24.900
A common error for
new pandas users is to try and

175
00:07:24.900 --> 00:07:28.350
do Boolean comparisons using
the ampersand operator,

176
00:07:28.350 --> 00:07:30.260
but not putting parentheses

177
00:07:30.260 --> 00:07:32.780
around the individual terms
you are interested in.

178
00:07:32.780 --> 00:07:35.030
So we could just write
what we wrote before,

179
00:07:35.030 --> 00:07:36.635
but this time
without parentheses.

180
00:07:36.635 --> 00:07:40.010
So df sub chance of
admit greater than 0.7,

181
00:07:40.010 --> 00:07:44.050
ampersand df chance of
admit less than 0.9,

182
00:07:44.050 --> 00:07:48.330
and we see that there's
an error for this as well.

183
00:07:49.130 --> 00:07:54.605
The problem is that Python is
trying to bitwise and a 0.7,

184
00:07:54.605 --> 00:07:56.135
and a pandas DataFrame,

185
00:07:56.135 --> 00:07:57.905
when you really want a bitwise

186
00:07:57.905 --> 00:08:01.475
and broadcast
DataFrames together.

187
00:08:01.475 --> 00:08:04.190
Another way to do this
is actually just to get

188
00:08:04.190 --> 00:08:06.230
rid of the comparison
operator completely,

189
00:08:06.230 --> 00:08:08.120
and instead to use
the built-in functions

190
00:08:08.120 --> 00:08:09.785
which mimic this approach.

191
00:08:09.785 --> 00:08:11.630
So we can say df sub chance of

192
00:08:11.630 --> 00:08:15.380
admit .gt for greater than 0.7,

193
00:08:15.380 --> 00:08:17.840
and then bitwise and
this with the df chance

194
00:08:17.840 --> 00:08:21.740
of admit .lt of 0.9.

195
00:08:21.740 --> 00:08:23.900
So these functions
are built right

196
00:08:23.900 --> 00:08:25.745
into the series and
DataFrame objects.

197
00:08:25.745 --> 00:08:27.875
So you can actually
chain them too,

198
00:08:27.875 --> 00:08:29.840
which results in
the same answer and

199
00:08:29.840 --> 00:08:32.105
the use of No visual operator.

200
00:08:32.105 --> 00:08:35.045
You can decide what
looks best for you.

201
00:08:35.045 --> 00:08:39.680
So df sub chance of admit .gt 0.7,

202
00:08:39.680 --> 00:08:41.390
actually returns our item,

203
00:08:41.390 --> 00:08:45.740
and then we can say
.lt 0.9 right on that,

204
00:08:45.740 --> 00:08:48.715
and so we can chain
these together.

205
00:08:48.715 --> 00:08:51.795
So this only works
if your operator,

206
00:08:51.795 --> 00:08:53.640
such as less than
or greater than,

207
00:08:53.640 --> 00:08:55.380
is built into the DataFrame,

208
00:08:55.380 --> 00:08:56.960
but I certainly
find the last code

209
00:08:56.960 --> 00:08:57.980
example to be much more

210
00:08:57.980 --> 00:08:59.000
readable than the one with

211
00:08:59.000 --> 00:09:00.695
the ampersands in
the parentheses.

212
00:09:00.695 --> 00:09:03.155
So you might want to
consider using this.

213
00:09:03.155 --> 00:09:06.260
You need to be able to read
and write all of these,

214
00:09:06.260 --> 00:09:07.910
and understand the implications

215
00:09:07.910 --> 00:09:09.455
of the route you're choosing.

216
00:09:09.455 --> 00:09:11.000
It's worth really going back and

217
00:09:11.000 --> 00:09:13.840
rewatching this lecture to
make sure that you have it.

218
00:09:13.840 --> 00:09:15.260
I would say 50 percent or

219
00:09:15.260 --> 00:09:16.670
more of the work
you'll be doing in

220
00:09:16.670 --> 00:09:20.310
data cleaning involves
querying DataFrames.

221
00:09:20.450 --> 00:09:23.090
In this lecture, we've
learned to query

222
00:09:23.090 --> 00:09:25.010
DataFrames using Boolean masking,

223
00:09:25.010 --> 00:09:26.690
which is extremely important

224
00:09:26.690 --> 00:09:28.925
and often used in
the world of data science.

225
00:09:28.925 --> 00:09:31.100
With Boolean masking,
we can select

226
00:09:31.100 --> 00:09:33.305
data based on
the criteria we define,

227
00:09:33.305 --> 00:09:35.645
and frankly, you're going
to use this everywhere.

228
00:09:35.645 --> 00:09:37.880
We've also seen how there
are many different ways

229
00:09:37.880 --> 00:09:39.080
to query the DataFrame

230
00:09:39.080 --> 00:09:40.910
and interesting site implications

231
00:09:40.910 --> 00:09:43.290
that come up when doing so.