WEBVTT

1
00:00:06.107 --> 00:00:09.214
In today's lecture, we're going to
be looking at time series and

2
00:00:09.214 --> 00:00:10.777
date functionality in pandas.

3
00:00:10.777 --> 00:00:14.152
Manipulating dates and
times is quite flexible in pandas and

4
00:00:14.152 --> 00:00:18.057
thus allows us to conduct more
analysis such as time series analysis,

5
00:00:18.057 --> 00:00:20.253
which we're going to talk about soon.

6
00:00:20.253 --> 00:00:23.876
Actually, pandas was originally created
by Wes McKinney to handle date and

7
00:00:23.876 --> 00:00:26.700
time data when he worked as
a consultant for hedge funds.

8
00:00:26.700 --> 00:00:28.600
So it's quite robust in this matter.

9
00:00:29.600 --> 00:00:33.922
Let's bring in pandas and numpy as usual.

10
00:00:33.922 --> 00:00:36.984
All right,
pandas has four main time related classes.

11
00:00:36.984 --> 00:00:41.178
Timestamp, DatetimeIndex,
Period, and PeriodIndex.

12
00:00:41.178 --> 00:00:43.100
First, let's look at timestamp.

13
00:00:43.100 --> 00:00:47.396
It represents a single timestamp and
associates values with points in time.

14
00:00:47.396 --> 00:00:53.907
For instance, let's create a timestamp
with a string 9/1/2019 at 10:05 AM.

15
00:00:53.907 --> 00:00:55.760
And here we have our timestamp.

16
00:00:55.760 --> 00:00:59.907
Timestamp is interchangeable with
Python's datetime in most cases.

17
00:00:59.907 --> 00:01:02.700
So we just do pd.Timestamp and
pass in the string.

18
00:01:05.099 --> 00:01:08.900
We can also create a timestamp by passing
multiple parameters such as year,

19
00:01:08.900 --> 00:01:12.212
month, hour, date, minutes, separately.

20
00:01:12.212 --> 00:01:15.025
So pd.Timestamp and
we just pass these in order.

21
00:01:15.025 --> 00:01:17.880
Timestamp also has some useful attributes,

22
00:01:17.880 --> 00:01:22.247
such as isoweekday(),
which shows the weekday of the timestamp.

23
00:01:22.247 --> 00:01:26.700
Note that 1 represents Monday and
7 represents Sunday.

24
00:01:26.700 --> 00:01:30.400
So we create our new timestamp and
then we just say isoweekday().

25
00:01:30.400 --> 00:01:35.981
And this is actually quite commonly
done to just get a simple numeric value.

26
00:01:35.981 --> 00:01:40.040
You can find extract the specific year,
month, day, hour,

27
00:01:40.040 --> 00:01:42.005
etc from a timestamp as well.

28
00:01:42.005 --> 00:01:47.384
So we can create some new timestamp and
as we're using it just do .second and see

29
00:01:47.384 --> 00:01:52.942
how many seconds there were, who are the
second parameter space rather for that.

30
00:01:52.942 --> 00:01:56.620
So suppose we weren't interested
in a specific point in time and

31
00:01:56.620 --> 00:01:58.538
instead we wanted a span of time.

32
00:01:58.538 --> 00:02:01.102
This is where the Period
class comes into play.

33
00:02:01.102 --> 00:02:06.423
Period represents a single time span,
such as a specific day or month.

34
00:02:06.423 --> 00:02:12.200
So here let's create a period that's
just for the month January 2016.

35
00:02:12.200 --> 00:02:16.279
So we do pd.Period('1/2016').

36
00:02:16.279 --> 00:02:21.070
You'll notice that when we print out the
granularity of the period is M for month,

37
00:02:21.070 --> 00:02:25.300
since this was the finest grained
piece of data that we provided.

38
00:02:25.300 --> 00:02:28.700
Here's an example of a period
that's March 5th, 2016.

39
00:02:28.700 --> 00:02:32.306
So we just do pd.Period,
pass in our date, and

40
00:02:32.306 --> 00:02:36.106
we'll see that it's got
the granularity of day.

41
00:02:36.106 --> 00:02:40.200
Period objects represent the full
time span that you specify.

42
00:02:40.200 --> 00:02:43.444
So arithmetic on period is very easy and
intuitive.

43
00:02:43.444 --> 00:02:48.159
For instance, if we just want to find
out 5 months after January 2016,

44
00:02:48.159 --> 00:02:49.643
we simply plus 5 to it.

45
00:02:49.643 --> 00:02:55.101
So pd.Period('1/2016') add 5,
and here we go.

46
00:02:55.101 --> 00:02:58.378
From the result,
you'll see that we get June 2016.

47
00:02:58.378 --> 00:03:03.859
If we want to find out two days before
March 5th, 2016, we simply subtract 2.

48
00:03:03.859 --> 00:03:07.039
So create our new period and subtract 2.

49
00:03:07.039 --> 00:03:11.696
The key here is that
the period object encapsulates

50
00:03:11.696 --> 00:03:14.842
the granularity for arithmetic.

51
00:03:14.842 --> 00:03:18.481
The index of a timestamp is a DatetimeIndex.

52
00:03:18.481 --> 00:03:22.787
And let's look at a quick example because
this is really quite handy when you start

53
00:03:22.787 --> 00:03:24.520
to deal with time series data.

54
00:03:24.520 --> 00:03:27.509
First, let's create our example series t1.

55
00:03:27.509 --> 00:03:32.600
We'll use the timestamp of September 1st,
2nd, and 3rd of 2016.

56
00:03:32.600 --> 00:03:36.026
When we look at the series, each
Timestamp is the index that has a value

57
00:03:36.026 --> 00:03:38.479
associated with it,
in this case, a, b, and c.

58
00:03:38.479 --> 00:03:41.818
So here we do pd.Series,
we're going to give a list, abc, so

59
00:03:41.818 --> 00:03:43.333
these are our data values.

60
00:03:43.333 --> 00:03:46.800
And then our indexes and array next to it.

61
00:03:46.800 --> 00:03:49.433
And we're going to do
create three Timestamps.

62
00:03:49.433 --> 00:03:53.492
One is going to be the first day of
September then the second day of September

63
00:03:53.492 --> 00:03:54.600
then the third day.

64
00:03:54.600 --> 00:03:57.000
Let's take a look at what
this creates as a series.

65
00:03:58.400 --> 00:04:00.600
So looking at the type
of our series index,

66
00:04:00.600 --> 00:04:03.100
we're going to see that
it's a DatetimeIndex.

67
00:04:03.100 --> 00:04:05.300
So we do type(t1.index).

68
00:04:05.300 --> 00:04:10.087
Remember the d-type above is referring
to the data values in the series

69
00:04:10.087 --> 00:04:11.133
not the index.

70
00:04:11.133 --> 00:04:15.200
So here we can see that
the index is a DatetimeIndex.

71
00:04:15.200 --> 00:04:18.399
So similarly, we can create
a period-based index as well,

72
00:04:18.399 --> 00:04:20.399
which I think is really quite nice.

73
00:04:20.399 --> 00:04:24.200
So we'll create some new series, def, and

74
00:04:24.200 --> 00:04:28.000
we'll just create our period
objects in that list for the index.

75
00:04:29.700 --> 00:04:33.675
And so looking at the type of ts2.index,
we'll see that it's a PeriodIndex.

76
00:04:36.300 --> 00:04:39.378
Now, let's look into how
to convert to Datetime.

77
00:04:39.378 --> 00:04:43.597
Suppose we have a list of dates of strings
and we want to create a new dataframe.

78
00:04:43.597 --> 00:04:46.100
So I'm going to try a bunch
of different date format.

79
00:04:46.100 --> 00:04:50.100
So here I'll say d1 = ['2 June 2013',

80
00:04:50.100 --> 00:04:54.700
which is common August 29,
2014', that's also common.

81
00:04:54.700 --> 00:04:57.498
'2015-06-26'.

82
00:04:57.498 --> 00:05:01.000
And then '7/12/16'].

83
00:05:01.000 --> 00:05:04.640
So if you take a human entered data,
this is what you're going to get.

84
00:05:04.640 --> 00:05:07.600
Or if you take data that comes
from multiple different systems.

85
00:05:07.600 --> 00:05:11.100
Let's say you're joining dataframes and

86
00:05:11.100 --> 00:05:14.400
you're bringing in date
fields from multiple places.

87
00:05:14.400 --> 00:05:16.600
And now let's just create
some random data here.

88
00:05:16.600 --> 00:05:20.400
So we'll just create a new dataframe,
just with some random integers.

89
00:05:20.400 --> 00:05:23.880
And then we're going to set our
index to d1 and some columns.

90
00:05:23.880 --> 00:05:25.600
And let's take a look at that.

91
00:05:27.600 --> 00:05:31.100
So using pandas to_datetime,
pandas will try and

92
00:05:31.100 --> 00:05:34.125
convert these Datetime and
put them into a standard format.

93
00:05:34.125 --> 00:05:36.961
because this is ugly and
horrible to deal with.

94
00:05:36.961 --> 00:05:40.318
So pandas has these nice
built-in to_datetime to try and

95
00:05:40.318 --> 00:05:42.040
figure out the format for us.

96
00:05:42.040 --> 00:05:44.700
So let's take a look with ts3.

97
00:05:46.100 --> 00:05:50.200
So to_datetime also() has options
to change the date parse order.

98
00:05:50.200 --> 00:05:55.200
For example, we can pass in the argument
dayfirst = True to parse the European

99
00:05:55.200 --> 00:05:59.600
date if we think that our data
is going to be in that format.

100
00:05:59.600 --> 00:06:02.100
So here I'll take '4.7.12'.

101
00:06:02.100 --> 00:06:06.300
You see there's some ambiguity here,
what's month and what's day.

102
00:06:06.300 --> 00:06:10.287
And well, even what's year, I guess,
it could be an ambiguity here.

103
00:06:10.287 --> 00:06:14.521
So we could just say dayfirst=True.

104
00:06:14.521 --> 00:06:18.879
So Timedeltas are differences in times.

105
00:06:18.879 --> 00:06:22.427
And this is not the same as a period,
but it may be it feels like it at first,

106
00:06:22.427 --> 00:06:24.335
but it's conceptually very similar.

107
00:06:24.335 --> 00:06:28.727
So for instance if we want to take
the difference between September 3rd and

108
00:06:28.727 --> 00:06:32.000
September 1st,
we get a Timedelta of two days.

109
00:06:32.000 --> 00:06:35.856
So we can actually just take
a Timestamp  - another Timestamp.

110
00:06:35.856 --> 00:06:41.000
And the resulting object is a Timedelta
and here you see it says that it's 2 days.

111
00:06:41.000 --> 00:06:44.544
It's printed out a nice
human parseable thing.

112
00:06:44.544 --> 00:06:48.979
But the object itself is
capturing that it's these 2 days.

113
00:06:48.979 --> 00:06:53.309
So we can also do something like
find what the date and time is for

114
00:06:53.309 --> 00:06:57.600
12 days and
three hours past September 2nd at 8:10 AM.

115
00:06:57.600 --> 00:06:59.720
So we don't have to have
these round number.

116
00:06:59.720 --> 00:07:03.385
So here we've taken a Timestamp
which is a very precise.

117
00:07:03.385 --> 00:07:06.000
It's 8:10AM.

118
00:07:06.000 --> 00:07:10.423
And here we just want to add two at
a Timedelta of 12 days and 3 hours.

119
00:07:10.423 --> 00:07:12.300
And we can see what that time is.

120
00:07:14.800 --> 00:07:20.176
So offset is similar to timedelta, but it
follows specific calendar duration rules.

121
00:07:20.176 --> 00:07:24.481
Offset allows flexibility in
terms of types of time intervals.

122
00:07:24.481 --> 00:07:27.447
Besides hour, day, week, month, etc.,

123
00:07:27.447 --> 00:07:32.800
it also has things like business day,
and end of month, semi month begin, etc.

124
00:07:32.800 --> 00:07:35.982
So very non-traditional time series, but

125
00:07:35.982 --> 00:07:39.598
things that we would use
in business all the time.

126
00:07:39.598 --> 00:07:42.600
So let's create a timestamp,
and see what day it is.

127
00:07:42.600 --> 00:07:47.070
So we'll create some new Timestamp and
we'll see which weekday it is and

128
00:07:47.070 --> 00:07:49.934
this is now the sixth,
so this is from the ISO.

129
00:07:49.934 --> 00:07:52.720
So now we can add the timestamp
with a week ahead.

130
00:07:52.720 --> 00:07:54.693
So we can take that Timestamp and

131
00:07:54.693 --> 00:07:57.700
then we can say we want to
add an offset of one week.

132
00:07:59.100 --> 00:08:01.702
So now let's try and
do this to month end.

133
00:08:01.702 --> 00:08:03.815
And this would give us
the last day of September.

134
00:08:03.815 --> 00:08:05.877
So here we can take a Timestamp and

135
00:08:05.877 --> 00:08:09.400
then we want to add some offset
to get to the month end.

136
00:08:09.400 --> 00:08:13.823
And so
now we actually have the month end date.

137
00:08:13.823 --> 00:08:18.100
Okay, next let's look at a few tricks for
working with dates in a DataFrame.

138
00:08:18.100 --> 00:08:19.900
Suppose we want to look
at nine measurements,

139
00:08:19.900 --> 00:08:24.212
taken bi-weekly, every Sunday,
starting in October 2016.

140
00:08:24.212 --> 00:08:28.244
Using date_range,
we can create a DatetimeIndex.

141
00:08:28.244 --> 00:08:32.494
In date_range, we have to either
specify the start or the end date.

142
00:08:32.494 --> 00:08:35.293
If it's not explicitly specified,
by default,

143
00:08:35.293 --> 00:08:38.200
the data is considered the start date.

144
00:08:38.200 --> 00:08:42.581
So then we have to take the specified
number of periods, and a frequency.

145
00:08:42.581 --> 00:08:47.600
So here I'm going to set it to '2W-
SUN' which means bi-weekly on Sunday.

146
00:08:47.600 --> 00:08:52.295
So like regex, there's sort of a mini
language to describe these periods.

147
00:08:52.295 --> 00:08:56.512
And the pandas documentation, if you get
really dealing with time series data,

148
00:08:56.512 --> 00:08:58.381
we're not going to in this course.

149
00:08:58.381 --> 00:09:01.683
But if you end up dealing
a lot with time series data,

150
00:09:01.683 --> 00:09:05.300
the pandas documentation is phenomenal.

151
00:09:05.300 --> 00:09:08.600
So here we'll do dates = pd.date_range.

152
00:09:08.600 --> 00:09:11.600
We set our start,
we say we want 9 periods.

153
00:09:11.600 --> 00:09:13.100
And this is our frequency, and

154
00:09:13.100 --> 00:09:16.300
then look at the DatetimeIndex
that comes out of that.

155
00:09:16.300 --> 00:09:19.400
And we see that it's well set up for it.

156
00:09:19.400 --> 00:09:22.000
So there's many other frequencies
that you can specify.

157
00:09:22.000 --> 00:09:25.000
For example,
one common one is the business day.

158
00:09:25.000 --> 00:09:27.238
And so here we just set the date_range.

159
00:09:27.238 --> 00:09:31.798
We give it the date, we set the periods,
and then we say freq= 'B'.

160
00:09:31.798 --> 00:09:33.819
Another common one is quarterly but

161
00:09:33.819 --> 00:09:38.000
setting the start of the quarter
in a specific month like June.

162
00:09:38.000 --> 00:09:44.799
So here we just set the periods to 12 and
then our freq= 'QS- JUN'.

163
00:09:44.799 --> 00:09:49.529
Now, let's go back to our weekly on
Sunday example and create a DataFrame

164
00:09:49.529 --> 00:09:54.700
using these dates, and some random data,
and see what we can do with it.

165
00:09:54.700 --> 00:09:57.400
So dates = pd.date_range.

166
00:09:57.400 --> 00:09:59.851
We're going to set the periods=9, and

167
00:09:59.851 --> 00:10:04.100
the frequency equal to two
weeks starting on Sunday.

168
00:10:04.100 --> 00:10:07.413
And now we're just going to
fill in to that some data.

169
00:10:07.413 --> 00:10:10.308
So I'm going to create
a column called Count 1.

170
00:10:10.308 --> 00:10:14.181
We'll make these some random numbers and
a cumulative sum of these.

171
00:10:14.181 --> 00:10:19.500
And then Count 2 as well,
and set the index to dates.

172
00:10:19.500 --> 00:10:21.000
Okay, so there's our dummy data.

173
00:10:22.400 --> 00:10:26.500
So first, we can check what day
of the week a specific date is.

174
00:10:26.500 --> 00:10:29.685
For example, here we can see that all
of the dates in our index are on a Sunday.

175
00:10:29.685 --> 00:10:32.100
Which matches the frequency that we set.

176
00:10:32.100 --> 00:10:37.781
So if we say df.index.weekday_name,
we see, they all come back on a Sunday.

177
00:10:37.781 --> 00:10:42.700
If we had more variable dates as our
index, we would see the variation here.

178
00:10:43.700 --> 00:10:48.116
We can also use the diff() to find
the difference between each date's value.

179
00:10:48.116 --> 00:10:53.177
And this is just on the data frame itself,
df.diff().

180
00:10:53.177 --> 00:10:57.737
Suppose we want to know what the mean
count is for each month in our DataFrame.

181
00:10:57.737 --> 00:11:00.055
We can do this using resample.

182
00:11:00.055 --> 00:11:04.136
Converting from a higher frequency from
a lower frequency is called down sampling.

183
00:11:04.136 --> 00:11:08.400
And we'll talk about this in a moment in a
little bit more detail in another lecture.

184
00:11:08.400 --> 00:11:12.979
So df.resample to monthly, and
let's look at the the mean values.

185
00:11:12.979 --> 00:11:17.300
And so here we've collapsed
the dates on a monthly cadence.

186
00:11:17.300 --> 00:11:20.220
So we've got this kind of date
perspective on how to do that.

187
00:11:20.220 --> 00:11:23.886
We haven't had to write our own group
by and figure it all out ourselves.

188
00:11:23.886 --> 00:11:27.351
We're able to use the resampling built-in.

189
00:11:27.351 --> 00:11:30.235
Now, let's talk about datetime
indexing and slicing,

190
00:11:30.235 --> 00:11:33.009
which is a wonderful feature
of the pandas DataFrame.

191
00:11:33.009 --> 00:11:36.990
For instance, we can use partial string
indexing and the key here is that

192
00:11:36.990 --> 00:11:41.375
it's actually based on string indexing
to find values from a particular year.

193
00:11:41.375 --> 00:11:45.990
So if we're just interested in 2017,
we can say df['2017'] and

194
00:11:45.990 --> 00:11:49.474
that returns to us all the values
that were from that year.

195
00:11:49.474 --> 00:11:51.300
Or we could do it from a particular month.

196
00:11:51.300 --> 00:11:55.553
So df['2016-12'].

197
00:11:55.553 --> 00:12:01.313
So remember, these are all string
values that were matching on.

198
00:12:01.313 --> 00:12:03.300
We can even slice on a range of dates.

199
00:12:03.300 --> 00:12:07.500
For example, here we might want
the values from December 2016 onwards.

200
00:12:07.500 --> 00:12:17.000
So we can just say we want
df['2016-12':] onwards.

201
00:12:17.000 --> 00:12:21.700
Okay, so that's how the date
functionality in pandas works.

202
00:12:21.700 --> 00:12:24.400
It's kind of a whirlwind
tour we've done here.

203
00:12:24.400 --> 00:12:26.936
We're going to talk about
resampling in another lecture.

204
00:12:26.936 --> 00:12:31.101
And that's maybe going to be a little
bit more clear how we use this.

205
00:12:31.101 --> 00:12:34.930
Again, if you have to deal
with a lot of datetime data,

206
00:12:34.930 --> 00:12:40.442
this lecture will become important to
come back to to refresh and understand.

207
00:12:40.442 --> 00:12:45.230
And also the functionality of pandas
with respect to datetime is really

208
00:12:45.230 --> 00:12:49.957
quite phenomenal and the documentation
describes it in more detail.